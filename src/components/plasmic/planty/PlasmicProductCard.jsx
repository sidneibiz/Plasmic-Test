// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: bJmo2tdG6kQGZ4iwYBrjeU
// Component: BSQ6AFlYL_eYT0
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  useTrigger,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Ratings from "../../Ratings"; // plasmic-import: 6Seh2opbHxlH6n/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_library_plasmic_color_type_css from "../library_plasmic_color_type/plasmic_library_plasmic_color_type.module.css"; // plasmic-import: seaQhLVS4bbjiGvJJrRwyL/projectcss
import projectcss from "./plasmic_planty.module.css"; // plasmic-import: bJmo2tdG6kQGZ4iwYBrjeU/projectcss
import sty from "./PlasmicProductCard.module.css"; // plasmic-import: BSQ6AFlYL_eYT0/css
import ShoppingCartIcon from "./icons/PlasmicIcon__ShoppingCart"; // plasmic-import: nUFz_MKLsQzxya/icon
import HeartOIcon from "./icons/PlasmicIcon__HeartO"; // plasmic-import: Qjr0gVxcvioXFU/icon
import ExpandIcon from "./icons/PlasmicIcon__Expand"; // plasmic-import: jL767GJDtcV4qG/icon
import f1M2MqHxBwPd6Ft9 from "./images/f1.jpeg"; // plasmic-import: m2MqHXBwPD6ft9/picture

export const PlasmicProductCard__VariantProps = new Array(
  "withReviews",
  "onSale"
);

export const PlasmicProductCard__ArgProps = new Array(
  "title",
  "price",
  "image",
  "ratings"
);

function PlasmicProductCard__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };

  const [isRootHover, triggerRootHoverProps] = useTrigger("useHover", {});
  const triggers = {
    hover_root: isRootHover
  };

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_library_plasmic_color_type_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootonSale]: hasVariant(variants, "onSale", "onSale"),
          [sty.rootwithReviews]: hasVariant(
            variants,
            "withReviews",
            "withReviews"
          )
        }
      )}
      data-plasmic-trigger-props={[triggerRootHoverProps]}
    >
      <div className={classNames(projectcss.all, sty.freeBox__kanmW)}>
        {p.renderPlasmicSlot({
          defaultContents: (
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__pfqn)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"none"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"100%"}
              src={{
                src: f1M2MqHxBwPd6Ft9,
                fullWidth: 270,
                fullHeight: 310,
                aspectRatio: undefined
              }}
            />
          ),

          value: args.image
        })}

        {(hasVariant(variants, "onSale", "onSale") ? true : true) ? (
          <div
            className={classNames(projectcss.all, sty.freeBox__py9Jy, {
              [sty.freeBoxonSale__py9JyVjWFg]: hasVariant(
                variants,
                "onSale",
                "onSale"
              )
            })}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__okf1F
              )}
            >
              {"Sale"}
            </div>
          </div>
        ) : null}
        {(triggers.hover_root ? true : true) ? (
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__vnwIa)}
          >
            <ShoppingCartIcon
              className={classNames(projectcss.all, sty.svg__e9Nmb)}
              role={"img"}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___5NUu2
              )}
            >
              {"Add to cart"}
            </div>

            <HeartOIcon
              className={classNames(projectcss.all, sty.svg___1SiJ)}
              role={"img"}
            />

            <ExpandIcon
              className={classNames(projectcss.all, sty.svg__zEga0)}
              role={"img"}
            />
          </p.Stack>
        ) : null}
      </div>

      {(hasVariant(variants, "withReviews", "withReviews") ? true : true)
        ? p.renderPlasmicSlot({
            defaultContents: (
              <Ratings
                className={classNames("__wab_instance", sty.ratings__oQgOq)}
              />
            ),

            value: args.ratings
          })
        : null}

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__x8Vvu)}
      >
        {p.renderPlasmicSlot({
          defaultContents: "Title",
          value: args.title,
          className: classNames(sty.slotTargetTitle)
        })}

        {p.renderPlasmicSlot({
          defaultContents: "$100",
          value: args.price,
          className: classNames(sty.slotTargetPrice)
        })}
      </p.Stack>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicProductCard__ArgProps,
          internalVariantPropNames: PlasmicProductCard__VariantProps
        }),

      [props, nodeName]
    );

    return PlasmicProductCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProductCard";
  } else {
    func.displayName = `PlasmicProductCard.${nodeName}`;
  }
  return func;
}

export const PlasmicProductCard = Object.assign(
  // Top-level PlasmicProductCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicProductCard
    internalVariantProps: PlasmicProductCard__VariantProps,
    internalArgProps: PlasmicProductCard__ArgProps
  }
);

export default PlasmicProductCard;
/* prettier-ignore-end */
